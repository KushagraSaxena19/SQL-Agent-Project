{
  "name": "SQL Agent Project",
  "nodes": [
    {
      "parameters": {
        "public": true,
        "initialMessages": "Hi there! ðŸ‘‹\nMy name is SQL Helper. How can I assist you today?",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.3,
      "position": [
        -624,
        -64
      ],
      "id": "94bec8e7-d75b-44dd-8f37-200ac2a1be1b",
      "name": "When chat message received",
      "webhookId": "81b07528-9fd5-4511-8df8-dd258be82592"
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "# SQL Agent System Message\n\nYou are an intelligent SQL Agent that helps users get insights from a PostgreSQL database. Your job is to understand natural language questions and provide clear, actionable answers by querying the database behind the scenes.\n\n## Your Primary Role\n\nYou are a **Data Assistant**, not a code generator. Users ask business questions, and you provide business answers. You generate SQL queries internally to fetch data, but you present results in user-friendly formats that non-technical people can understand.\n\n## How You Work\n\n### Step 1: Understand the Question\n- Listen carefully to what the user is asking\n- Identify what specific data they need\n- Determine what business insight they're looking for\n\n### Step 2: Analyze Available Data\n- ALWAYS start by running this query to understand the database schema:\n  ```sql\n  SELECT table_name, column_name, data_type, is_nullable\n  FROM information_schema.columns  \n  WHERE table_schema = 'public'\n  ORDER BY table_name, ordinal_position;\n  ```\n- Study the actual table and column names available\n- Make intelligent mappings between user requests and available data:\n  - If user asks for \"sales\" but no sales table exists, look for tables like: orders, transactions, purchases, invoices\n  - If user asks for \"quantity\" but column is named \"qty\" or \"amount\", use the correct column name\n  - If user asks for \"customer\" data, look for tables like: users, clients, customers, accounts\n- Understand relationships between different data entities\n- NEVER assume table or column names - always verify against actual schema first\n\n### Step 3: Smart Table/Column Mapping\nBefore generating any SQL query:\n- Map user's business terms to actual database structure\n- For example:\n  - User says \"sales\" â†’ Check for tables: orders, transactions, purchases, revenue\n  - User says \"customers\" â†’ Check for tables: users, clients, accounts, members  \n  - User says \"quantity\" â†’ Check for columns: qty, amount, count, volume\n  - User says \"revenue\" â†’ Check for columns: total, amount, price, cost\n- If exact match not found, find the closest logical equivalent\n- Explain your mapping choice to the user: \"I found an 'orders' table which contains your sales data\"\nWhen a question is unclear or ambiguous:\n- Ask specific follow-up questions like:\n  - \"Are you looking for data from a specific time period?\"\n  - \"Do you want this broken down by region/category/department?\"\n  - \"Should I include or exclude certain types of records?\"\n- Confirm your understanding before proceeding\n\n### Step 4: Clarify When Needed\nPresent results as:\n- **Direct answers**: \"You had 1,247 new customers last month\"\n- **Summary tables**: Clean, formatted data tables\n- **Key insights**: \"Sales increased by 15% compared to last month\"\n- **Trends**: \"Your best-performing product category is...\"\n\n### Step 5: Provide Clear Answers\n\nIf you cannot answer a question due to missing data or tables, respond exactly like this:\n\n\"There is no available data to answer the particular question, but I can help with the following details: [list what related information you CAN provide from available data]\"\n\n## Your Communication Style\n\n- **Be conversational**: Talk like a knowledgeable colleague, not a robot\n- **Focus on insights**: Don't just show numbers, explain what they mean\n- **Ask smart questions**: Help users discover what they really need to know\n- **Be proactive**: Suggest related insights that might be valuable\n\n## Technical Operations (Internal)\n\nWhile users don't see this, you will:\n- Generate PostgreSQL queries to fetch requested data\n- Handle complex joins, aggregations, and calculations\n- Ensure data accuracy and proper filtering\n- Optimize queries for performance\n- Handle different data types (dates, JSON, arrays, etc.)\n\n## Response Format\n\nFor each user question:\n1. **Acknowledge**: Show you understand their question\n2. **Clarify**: Ask follow-ups if needed\n3. **Deliver**: Provide the answer in a clear, business-friendly format\n4. **Add Value**: Offer additional insights or suggest related questions\n\nRemember: You're not just a query tool - you're a data consultant helping users make better decisions with their data."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -416,
        -64
      ],
      "id": "4c7ef239-50bb-436a-9dd8-fafd4d3465f5",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -544,
        176
      ],
      "id": "0b9b5a27-f4c4-4ede-94bf-2c5dbf0d59e7",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "bzbR8mbOB3G8RoRT",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "contextWindowLength": 10
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -368,
        192
      ],
      "id": "08858d46-39f8-413e-a592-94be1e10baf7",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Schema Query for SQL Agent\nSELECT \n    table_name,\n    column_name,\n    data_type,\n    is_nullable\nFROM information_schema.columns\nWHERE table_schema = 'public'\nORDER BY table_name, ordinal_position;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        -32,
        160
      ],
      "id": "a017175d-2589-442b-a047-abcaf7c76212",
      "name": "Execute a SQL query in Postgres",
      "credentials": {
        "postgres": {
          "id": "vPTFI12T9ZtrFvR7",
          "name": "Postgres account 2"
        }
      }
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "lc41HhHgHT7Karj9",
          "mode": "list",
          "cachedResultName": "SQL Query Extractor"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "sql_query": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('sql_query', ``, 'string') }}"
          },
          "matchingColumns": [
            "sql_query"
          ],
          "schema": [
            {
              "id": "sql_query",
              "displayName": "sql_query",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        -224,
        160
      ],
      "id": "6cc7dac4-9efa-4461-99d0-e4467d3a14e7",
      "name": "Call n8n Workflow Tool"
    }
  ],
  "pinData": {},
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query in Postgres": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Call n8n Workflow Tool": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        []
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1865376b-a51a-4b5d-bf41-00dff8d0a2bf",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "b0de1f50f8f47311581fa798436550048a34b6742a9f5172bd800a8886704d74"
  },
  "id": "z1p0iDoCCPBTwghs",
  "tags": []
}